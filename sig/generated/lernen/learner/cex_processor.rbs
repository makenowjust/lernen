# Generated from lib/lernen/learner/cex_processor.rb with RBS::Inline

module Lernen
  module Learner
    type cex_processing_method = :linear | :binary | :exponential

    interface _ConfToPrefix[Conf, In]
      def []: (Conf conf) -> Array[In]
    end

    # CexProcessor contains implementations of counterexample processing functions.
    #
    # A counterexample is a word that leads to the different result between
    # a hypothesis automaton and a SUL (i.e., `hypothesis.run(cex)[0].last != sul.query_last(cex)`).
    # Where `h[n] = conf_to_prefix[hypothesis.run(cex[0...n])[1]]`, there
    # are some `n` (where `0 <= n < cex.size`) such that
    # `sul.query_last(h[n] + cex[n...]) != sul.query_last(h[n + 1] + cex[n + 1...])`
    # because `sul.query_last(cex) == sul.query_last(h[0] + cex[n...])` and
    # `sul.query_last(h[cex.size] + cex[cex.size...]) == hypothesis.run(cex)[0].last`.
    # Finding such a position `n` from `cex` is called "counterexample processing".
    #
    # The result `n` of counterexample processing has a good property for automata
    # learning. Because `sul.query_last(h[n] + cex[n...]) != sul.query_last(h[n + 1] + cex[n + 1...])`,
    # a prefix `h[n] + cex[n]` leads a different state than a state of `h[n + 1]`
    # with a suffix `cex[n + 1...]`.
    #
    # For counterexample processing, we can use some searching approach such like
    # linear or binrary search. Using binary search for counterexample processing,
    # it is known as the Rivest-Schapire (RS) optimization typically. For the more
    # detailed information, please refer [Isberner and Steffen (2014) "An Abstract
    # Framework for Counterexample Analysis in Active Automata Learning"](https://proceedings.mlr.press/v34/isberner14a).
    module CexProcessor
      # Processes a given counterexample in the `cex_processing` way.
      #
      # It returns a triple `[cex[0...n], cex[n], cex[n...]]` instead of `n` such that
      # `sul.query_last(h[n] + cex[n...]) != sul.query_last(h[n + 1] + cex[n + 1...])`.
      #
      # : [Conf, In, Out] (
      #    System::SUL[In, Out] sul,
      #    Automaton::TransitionSystem[Conf, In, Out] hypothesis,
      #    Array[In] cex,
      #    _ConfToPrefix[Conf, In] conf_to_prefix,
      #    ?cex_processing: cex_processing_method
      #  ) -> [Array[In], In, Array[In]]
      def self.process: [Conf, In, Out] (System::SUL[In, Out] sul, Automaton::TransitionSystem[Conf, In, Out] hypothesis, Array[In] cex, _ConfToPrefix[Conf, In] conf_to_prefix, ?cex_processing: cex_processing_method) -> [ Array[In], In, Array[In] ]

      private

      # Processes a given counterexample by linear search.
      #
      # : [Conf, In, Out] (
      #    System::SUL[In, Out] sul,
      #    Automaton::TransitionSystem[Conf, In, Out] hypothesis,
      #    Array[In] cex,
      #    _ConfToPrefix[Conf, In] conf_to_prefix,
      #  ) -> [Array[In], In, Array[In]]
      def self.process_linear: [Conf, In, Out] (System::SUL[In, Out] sul, Automaton::TransitionSystem[Conf, In, Out] hypothesis, Array[In] cex, _ConfToPrefix[Conf, In] conf_to_prefix) -> [ Array[In], In, Array[In] ]

      # Processes a given counterexample by binary search.
      #
      # It is known as the Rivest-Schapire (RS) optimization.
      #
      # : [Conf, In, Out] (
      #    System::SUL[In, Out] sul,
      #    Automaton::TransitionSystem[Conf, In, Out] hypothesis,
      #    Array[In] cex,
      #    _ConfToPrefix[Conf, In] conf_to_prefix,
      #    ?low: Integer
      #  ) -> [Array[In], In, Array[In]]
      def self.process_binary: [Conf, In, Out] (System::SUL[In, Out] sul, Automaton::TransitionSystem[Conf, In, Out] hypothesis, Array[In] cex, _ConfToPrefix[Conf, In] conf_to_prefix, ?low: Integer) -> [ Array[In], In, Array[In] ]

      # Processes a given counterexample by exponential seatch.
      #
      # : [Conf, In, Out] (
      #    System::SUL[In, Out] sul,
      #    Automaton::TransitionSystem[Conf, In, Out] hypothesis,
      #    Array[In] cex,
      #    _ConfToPrefix[Conf, In] conf_to_prefix,
      #  ) -> [Array[In], In, Array[In]]
      def self.process_exponential: [Conf, In, Out] (System::SUL[In, Out] sul, Automaton::TransitionSystem[Conf, In, Out] hypothesis, Array[In] cex, _ConfToPrefix[Conf, In] conf_to_prefix) -> [ Array[In], In, Array[In] ]
    end
  end
end
