# Generated from lib/lernen/algorithm/kearns_vazirani_vpa.rb with RBS::Inline

module Lernen
  module Algorithm
    # KearnzVaziraniVPA is an implementation of Kearnz-Vazirani algorithm for VPA.
    #
    # The idea behind this implementation is described by [Isberner (2015) "Foundations
    # of Active Automata Learning: An Algorithmic Overview"](https://eldorado.tu-dortmund.de/handle/2003/34282).
    module KearnsVaziraniVPA
      # Runs Kearns-Vazirani algoritghm for VPA and returns an inferred VPA.
      #
      # `max_learning_rounds` is a parameter for specifying the maximum number of iterations for learning.
      # When `max_learning_rounds: nil` is specified, it means the algorithm only stops if the equivalent
      # hypothesis is found.
      #
      # : [In, Call, Return] (
      #    Array[In] alphabet, Array[Call] call_alphabet, Array[Return] return_alphabet,
      #    System::MooreLikeSUL[In, bool] sul, Equiv::Oracle[In, bool] oracle,
      #    ?cex_processing: cex_processing_method, ?max_learning_rounds: Integer | nil
      #  ) -> Automaton::VPA[In, Call, Return]
      def self.learn: [In, Call, Return] (Array[In] alphabet, Array[Call] call_alphabet, Array[Return] return_alphabet, System::MooreLikeSUL[In, bool] sul, Equiv::Oracle[In, bool] oracle, ?cex_processing: cex_processing_method, ?max_learning_rounds: Integer | nil) -> Automaton::VPA[In, Call, Return]

      private

      # Constructs the first hypothesis VPA.
      #
      # : [In, Call, Return] (
      #    Array[In] alphabet, Array[Call] call_alphabet, Array[Return] return_alphabet,
      #    System::MooreLikeSUL[In, bool] sul,
      #  ) -> Automaton::VPA[In, Call, Return]
      def self.construct_first_hypothesis: [In, Call, Return] (Array[In] alphabet, Array[Call] call_alphabet, Array[Return] return_alphabet, System::MooreLikeSUL[In, bool] sul) -> Automaton::VPA[In, Call, Return]
    end
  end
end
