# Generated from lib/lernen/algorithm/observation_table.rb with RBS::Inline

module Lernen
  module Algorithm
    # ObservationTable is an implementation of observation tabel data structure.
    #
    # This data structure is used for Angluin's L* algorithm.
    #
    # @rbs generic In  -- Type for input alphabet
    # @rbs generic Out -- Type for output values
    class ObservationTable[In, Out]
      @table: Hash[Array[In], Array[Out]]

      @suffixes: Array[Array[In]]

      @prefixes: Array[Array[In]]

      @automaton_type: Automaton::transition_system_type

      @sul: System::SUL[In, Out]

      @alphabet: Array[In]

      # : (
      #     Array[In] alphabet,
      #     System::SUL[In, Out] sul,
      #     automaton_type: :dfa | :moore | :mealy
      #   ) -> void
      def initialize: (Array[In] alphabet, System::SUL[In, Out] sul, automaton_type: :dfa | :moore | :mealy) -> void

      attr_reader prefixes: Array[Array[In]]

      attr_reader suffixes: Array[Array[In]]

      # Finds new prefixes to close.
      #
      # : () -> (Array[Array[In]] | nil)
      def find_prefixes_to_close: () -> (Array[Array[In]] | nil)

      # Checks consistency and returns a new suffix to add if this observation table
      # is inconsistent.
      #
      # : () -> (Array[In] | nil)
      def check_consistency: () -> (Array[In] | nil)

      # Update rows of this observation table.
      #
      # : () -> void
      def update_table: () -> void

      # Update the row for the given `prefix` of this observation table.
      #
      # : (Array[In] prefix) -> void
      def update_table_row: (Array[In] prefix) -> void

      # Constructs a hypothesis automaton from this observation table.
      #
      # : () -> [Automaton::TransitionSystem[Integer, In, Out], Hash[Integer, Array[In]]]
      def build_hypothesis: () -> [ Automaton::TransitionSystem[Integer, In, Out], Hash[Integer, Array[In]] ]
    end
  end
end
