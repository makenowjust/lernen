# Generated from lib/lernen/algorithm/procedural_spa.rb with RBS::Inline

module Lernen
  module Algorithm
    # ProceduralSPA is an implementation of the learning algorithm for SPA.
    #
    # This algorithm is described in [Frohme & Seffen (2021) "Compositional
    # Learning of Mutually Recursive Procedural Systems"](https://link.springer.com/article/10.1007/s10009-021-00634-y).
    #
    # @rbs generic In     -- Type for input alphabet
    # @rbs generic Call   -- Type for call alphabet
    # @rbs generic Return -- Type for return alphabet
    class Procedural[In, Call, Return] < Learner[In | Call | Return, bool]
      @alphabet: Array[In]

      @call_alphabet: Array[Call]

      @return_input: Return

      @sul: System::SUL[In | Call | Return, bool]

      @algorithm: :lstar | :kearns_vazirani | :lsharp

      @algorithm_params: Hash[untyped, untyped]

      @cex_processing: cex_processing_method

      @manager: ATRManager[In, Call, Return]

      # : (
      #     Array[In] alphabet,
      #     Array[Call] call_alphabet,
      #     Return return_input,
      #     System::SUL[In | Call | Return, bool] sul,
      #     ?algorithm: :lstar | :kearns_vazirani | :lsharp,
      #     ?algorithm_params: Hash[untyped, untyped],
      #     ?cex_processing: cex_processing_method,
      #     ?scan_procs: bool
      #   ) -> void
      def initialize: (Array[In] alphabet, Array[Call] call_alphabet, Return return_input, System::SUL[In | Call | Return, bool] sul, ?algorithm: :lstar | :kearns_vazirani | :lsharp, ?algorithm_params: Hash[untyped, untyped], ?cex_processing: cex_processing_method, ?scan_procs: bool) -> void
    end
  end
end
