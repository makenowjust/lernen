# Generated from lib/lernen/algorithm/discrimination_tree.rb with RBS::Inline

module Lernen
  module Algorithm
    # DiscriminationTree is an implementation of discrimination tree data structure.
    #
    # This data structure is used for Kearns-Vazirani algorithm.
    #
    # @rbs generic In  -- Type for input alphabet
    # @rbs generic Out -- Type for output values
    class DiscriminationTree[In, Out]
      type tree[In, Out] = Node[In, Out] | Leaf[In]

      class Node[In, Out] < Data
        attr_reader suffix: Array[In]
        attr_reader branch: Hash[Out, tree[In, Out]]
        def self.[]: [In, Out] (Array[In] suffix, Hash[Out, tree[In, Out]] branch) -> Node[In, Out]
      end

      class Leaf[In] < Data
        attr_reader prefix: Array[In]
        def self.[]: [In] (Array[In] prefix) -> Leaf[In]
      end

      @alphabet: Array[In]

      @sul: System::SUL[In, Out]

      @automaton_type: :dfa | :mealy | :moore

      @cex_processing: cex_processing_method

      @path_hash: Hash[Array[In], Array[Out]]

      @root: Node[In, Out]

      # : (
      #     Array[In] alphabet,
      #     System::SUL[In, Out] sul,
      #     cex: Array[In],
      #     automaton_type: :dfa | :mealy | :moore,
      #     cex_processing: cex_processing_method
      #   ) -> void
      def initialize: (Array[In] alphabet, System::SUL[In, Out] sul, cex: Array[In], automaton_type: :dfa | :mealy | :moore, cex_processing: cex_processing_method) -> void

      # Returns a prefix discriminated by `word`.
      #
      # : (Array[In] word) -> Array[In]
      def sift: (Array[In] word) -> Array[In]

      # Constructs a hypothesis automaton from this discrimination tree.
      #
      # : () -> [Automaton::TransitionSystem[Integer, In, Out], Hash[Integer, Array[In]]]
      def build_hypothesis: () -> [ Automaton::TransitionSystem[Integer, In, Out], Hash[Integer, Array[In]] ]

      # Update this classification tree by the given `cex`.
      #
      # : (
      #    Array[In] cex,
      #    Automaton::TransitionSystem[Integer, In, Out] hypothesis,
      #    Hash[Integer, Array[In]] state_to_prefix
      #  ) -> void
      def refine_hypothesis: (Array[In] cex, Automaton::TransitionSystem[Integer, In, Out] hypothesis, Hash[Integer, Array[In]] state_to_prefix) -> void
    end
  end
end
