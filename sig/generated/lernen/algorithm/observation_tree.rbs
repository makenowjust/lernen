# Generated from lib/lernen/algorithm/observation_tree.rb with RBS::Inline

module Lernen
  module Algorithm
    # ObservationTree is an implementation of observation tree data structure.
    #
    # This data structure is used for L# algorithm.
    #
    # @rbs generic In  -- Type for input alphabet
    # @rbs generic Out -- Type for output values
    class ObservationTree[In, Out]
      class Node[In, Out] < Data
        attr_reader output: Out | nil
        attr_reader branch: Hash[In, Node[In, Out]]
        def self.[]: [In, Out] (Out output, Hash[In, Node[In, Out]] branch) -> Node[In, Out]
      end

      @sul: System::SUL[In, Out]

      @automaton_type: :dfa | :mealy | :moore

      @root: Node[In, Out]

      # : (
      #     System::SUL[In, Out] sul,
      #     automaton_type: :dfa | :mealy | :moore
      #   ) -> void
      def initialize: (System::SUL[In, Out] sul, automaton_type: :dfa | :mealy | :moore) -> void

      attr_reader root: Node[In, Out]

      # Returns a node for the given word.
      # When the word (or its subword) is not observed, it returns `nil` instead.
      #
      # : (Array[In] word) -> (Node[In, Out] | nil)
      def []: (Array[In] word) -> (Node[In, Out] | nil)

      # Returns an output sequence for the given word if it is observed.
      # If it is not, it returns `nil` instead.
      #
      # : (Array[In] word) -> (Array[Out] | nil)
      def observed_query: (Array[In] word) -> (Array[Out] | nil)

      # Returns an output sequence for the given word.
      # When the word is observed, it runs actual query over `sul`.
      #
      # : (Array[In] word) -> Array[Out]
      def query: (Array[In] word) -> Array[Out]
    end
  end
end
