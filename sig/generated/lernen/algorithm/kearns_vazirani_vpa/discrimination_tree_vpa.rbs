# Generated from lib/lernen/algorithm/kearns_vazirani_vpa/discrimination_tree_vpa.rb with RBS::Inline

module Lernen
  module Algorithm
    module KearnsVaziraniVPA
      # DiscriminationTreeVPA is a extended version of discrimination tree for VPA.
      #
      # @rbs generic In     -- Type for input alphabet
      # @rbs generic Call   -- Type for call alphabet
      # @rbs generic Return -- Type for return alphabet
      class DiscriminationTreeVPA[In, Call, Return]
        type tree[In, Call, Return] = Node[In, Call, Return] | Leaf[In, Call, Return]

        class Node[In, Call, Return] < Data
          attr_reader access: Array[In | Call | Return]
          attr_reader suffix: Array[In | Call | Return]
          attr_reader branch: Hash[bool, tree[In, Call, Return]]
          def self.[]: [In, Call, Return] (Array[In | Call | Return] access, Array[In | Call | Return] suffix, Hash[bool, tree[In, Call, Return]] branch) -> Node[In, Call, Return]
        end

        class Leaf[In, Call, Return] < Data
          attr_reader prefix: Array[In | Call | Return]
          def self.[]: [In, Call, Return] (Array[In | Call | Return] prefix) -> Leaf[In, Call, Return]
        end

        @alphabet: Array[In]

        @call_alphabet: Array[Call]

        @return_alphabet: Array[Return]

        @sul: System::MooreLikeSUL[In | Call | Return, bool]

        @cex_processing: cex_processing_method

        @path_hash: Hash[Array[In | Call | Return], Array[bool]]

        @root: Node[In, Call, Return]

        # : (
        #     Array[In] alphabet,
        #     Array[Call] call_alphabet,
        #     Array[Return] return_alphabet,
        #     System::MooreLikeSUL[In | Call | Return, bool] sul,
        #     cex: Array[In],
        #     cex_processing: cex_processing_method
        #   ) -> void
        def initialize: (Array[In] alphabet, Array[Call] call_alphabet, Array[Return] return_alphabet, System::MooreLikeSUL[In | Call | Return, bool] sul, cex: Array[In], cex_processing: cex_processing_method) -> void

        # Constructs a hypothesis automaton from this discrimination tree.
        #
        # : () -> [Automaton::VPA[In, Call, Return], Hash[Integer, Array[In | Call | Return]]]
        def build_hypothesis: () -> [ Automaton::VPA[In, Call, Return], Hash[Integer, Array[In | Call | Return]] ]

        # Update this classification tree by the given `cex`.
        #
        # : (
        #    Array[In | Call | Return] cex,
        #    Automaton::VPA[In, Call, Return] hypothesis,
        #    Hash[Integer, Array[In | Call | Return]] state_to_prefix
        #  ) -> void
        def refine_hypothesis: (Array[In | Call | Return] cex, Automaton::VPA[In, Call, Return] hypothesis, Hash[Integer, Array[In | Call | Return]] state_to_prefix) -> void

        private

        # Returns a prefix discriminated by `word`.
        #
        # : (Array[In | Call | Return] word) -> Array[In | Call | Return]
        def sift: (Array[In | Call | Return] word) -> Array[In | Call | Return]
      end
    end
  end
end
