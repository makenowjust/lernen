# Generated from lib/lernen/equiv/random_well_matched_word_oracle.rb with RBS::Inline

module Lernen
  module Equiv
    # RandomWellMatchedWordOracle provides an implementation of equivalence query
    # that finds a counterexample by using random well-matched word generation.
    #
    # This takes three important parameters:
    #
    # - `max_words` (default: `100`): It is a limit of number of random words.
    #     If random words is generated and tried up to this value and no counterexample
    #     is found, it returns `nil` finally.
    # - `min_word_size` (default: `2`): It is the minimal size of randomly generated word.
    #     It should be greater than `0`.
    # - `max_word_size` (default: `30`): It is the maximal size of randomly generated word.
    #     It should be greater than or equal to `min_word_size`.
    # - `call_prob` (default: `0.1`): It is a probability to generate call and return subwords.
    # - `initial_proc` (default `nil`): It is the initial proc character.
    #     If it is specified, the generated words must be started with it.
    #
    # @rbs generic In     -- Type for input alphabet
    # @rbs generic Call   -- Type for call alphabet
    # @rbs generic Return -- Type for return alphabet
    # @rbs generic Out    -- Type for output values
    class RandomWellMatchedWordOracle[In, Call, Return, Out] < Oracle[In | Call | Return, Out]
      @alphabet: Array[In]

      @call_alphabet: Array[Call]

      @return_alphabet: Array[Return]

      @max_words: Integer

      @min_word_size: Integer

      @max_word_size: Integer

      @call_prob: Float

      @initial_proc: Call | nil

      @random: Random

      # : (
      #     Array[In] alphabet,
      #     Array[Call] call_alphabet,
      #     Array[Return] return_alphabet,
      #     System::SUL[In | Call | Return, Out] sul,
      #     ?max_words: Integer,
      #     ?min_word_size: Integer,
      #     ?max_word_size: Integer,
      #     ?call_prob: Float,
      #     ?initial_proc: Call | nil,
      #     ?random: Random
      #   ) -> void
      def initialize: (Array[In] alphabet, Array[Call] call_alphabet, Array[Return] return_alphabet, System::SUL[In | Call | Return, Out] sul, ?max_words: Integer, ?min_word_size: Integer, ?max_word_size: Integer, ?call_prob: Float, ?initial_proc: Call | nil, ?random: Random) -> void

      # @rbs override
      def find_cex: ...

      private

      # : () -> Array[In | Call | Return]
      def generate_word: () -> Array[In | Call | Return]

      # : (Array[In | Call | Return] word, Integer word_size) -> void
      def generate_word_internal: (Array[In | Call | Return] word, Integer word_size) -> void
    end
  end
end
