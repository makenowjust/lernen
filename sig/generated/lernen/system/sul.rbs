# Generated from lib/lernen/system/sul.rb with RBS::Inline

module Lernen
  module System
    # SUL represents a system under learning.
    #
    # It is an abtraction of a system under learning (SUL) which accepts an operation
    # called "membership query"; it takes an input string (word) and returns a sequence
    # of outputs corresponding to the input string.
    #
    # This SUL assumes the system is much like Mealy machine; that is, a transition puts
    # an output, and query does not accept the empty string due to no outputs.
    #
    # This SUL also implements cache mechanism. The cache mechanism is enabled by the default,
    # and it can be disabled by specifying `cache: false`.
    #
    # On running a SUL, this SUL records the statistics information. We can obtain this
    # information by `SUL#stats`.
    #
    # Note that this class is *abstract*. You should implement the following method:
    #
    # - `#step(input)`
    #
    # @rbs generic In  -- Type for input alphabet
    # @rbs generic Out -- Type for output values
    class SUL[In, Out]
      @cache: Hash[Array[In], Array[Out]] | nil

      @num_cached_queries: Integer

      @num_queries: Integer

      @num_steps: Integer

      # : (?cache: bool) -> void
      def initialize: (?cache: bool) -> void

      # Returns the statistics information as a `Hash` object.
      #
      # The result hash contains the following values.
      #
      # - `num_cache`: The number of cached queries.
      # - `num_cached_queries`: The number of queries uses the cache.
      # - `num_queries`: The number of (non-cached) queries.
      # - `num_steps`: The total number of steps.
      #
      # : () -> Hash[Symbol, Integer]
      def stats: () -> Hash[Symbol, Integer]

      # Runs a membership query with the given word.
      #
      # Note that this method does not accept the empty string due to no outpus.
      # If you need to call `query` with the empty string, you should use `MooreSUL#query_empty` instead.
      #
      # : (Array[In] word) -> Array[Out]
      def query: (Array[In] word) -> Array[Out]

      # Runs a membership query with the given word, and returns the last output.
      #
      # It is the same as `query(word).last`.
      #
      # : (Array[In] word) -> Out
      def query_last: (Array[In] word) -> Out

      # It is a setup procedure of this SUL.
      #
      # Note that it does nothing by default.
      #
      # : () -> void
      def setup: () -> void

      # It is a shutdown procedure of this SUL.
      #
      # Note that it does nothing by default.
      #
      # : () -> void
      def shutdown: () -> void

      # Consumes the given `input` and returns the correspoding output.
      #
      # This is an abstract method.
      #
      # : (In input) -> Out
      def step: (In input) -> Out
    end
  end
end
